const textMap = ["设置", "Settings", "注销", "Log out"];
let customFetchInitialized = false;

function createOverlayAndLayer(title, url) {
    const overlay = document.createElement('div');
    overlay.id = 'overlay';

    const layer = document.createElement('div');
    layer.id = 'layer';
    layer.innerHTML = `
        <div class="title">${title}
            <div><span class="close">×</span></div>
        </div>
        <div class="content">
            <iframe class="iframe" src="${url}"></iframe>
        </div>
    `;

    document.body.appendChild(overlay);
    document.body.appendChild(layer);

    const closeLayer = () => {
        layer.remove();
        overlay.remove();
    };

    overlay.addEventListener('click', closeLayer);
    layer.querySelector('.close').addEventListener('click', closeLayer);
}

function createButton(text, url) {
    const button = document.createElement("div");
    button.setAttribute('role', 'menuitem');
    button.className = 'flex items-center m-1.5 p-2.5 text-sm cursor-pointer hover:bg-[#f5f5f5] rounded-md px-3 mx-2 gap-2.5 py-3';
    button.innerHTML = `<div class="flex-grow text-center">${text}</div>`;

    button.addEventListener('click', () => {
        if (text === "切换节点") {
            window.location.href = "/list";
        } else if (text === "语音交流") {
            $.ajax({
                url: "/backend-api/voice_token",
                method: "GET",
                timeout: 0,
            }).done(function (response) {
                window.open(`${window.__voiceServer}?c=${window.location.origin}&e=${response.e2ee_key}&t=${response.token}`, '_blank');
            });
        } else if (url) {
            window.open(url, '_blank');
        } else {
            createOverlayAndLayer(text, url);
        }
    });

    return button;
}

setInterval(() => {
    //移除聊天分享按钮
    document.querySelector("div.flex.gap-2.pr-1 span") ?.remove();

    //隐藏右下角的调试
    const groupFixedElement = document.querySelector("div.group.fixed");
    if (groupFixedElement) {
        groupFixedElement.style.display = groupFixedElement.querySelectorAll("button").length === 2 ? "none" : "";
    }

    //确保 customFetchInitialized 只在隐藏右下角的调试功能之后设为 true
    if (!customFetchInitialized && groupFixedElement && groupFixedElement.style.display === "none") {
        customFetchInitialized = true;
        initCustomFetch();
    }

    //移除左下角的按钮但保留主控件的布局
    const flexColElement = document.querySelector("div.flex.flex-col.pt-2");
    if (flexColElement) {
        while (flexColElement.firstChild) {
            flexColElement.removeChild(flexColElement.firstChild);
        }
    }

    //右上角按钮移除
    const menuContainer = document.querySelector("div[data-radix-popper-content-wrapper]");
    if (menuContainer) {
        // 检查是否包含textMap其中一个
        const containsTextMap = Array.from(menuContainer.querySelectorAll('div[role="menuitem"]')).some(item =>
            textMap.some(text => item.textContent.trim().includes(text))
        );

        if (containsTextMap) {
            // 移除多余按钮
            const buttons = Array.from(menuContainer.querySelectorAll('div[role="menuitem"]'));
            buttons.forEach(item => {
                if (!textMap.some(text => item.textContent.trim().includes(text))) {
                    item.remove();
                }
            });
            //移除分割线
            document.querySelectorAll('div[role="separator"]').forEach(separator => separator.remove());
            //移除邀请栏
            document.querySelectorAll('div.flex.items-center.justify-between.gap-2.py-2.pl-3.pr-2.juice\\:pl-5.juice\\:pr-4').forEach(element => {
                element.remove();
            });

            // 替换textMap按钮
            const settingsButton = buttons.find(item => item.textContent.trim().includes("设置") || item.textContent.trim().includes("Settings"));
            if (settingsButton) {
                settingsButton.innerHTML = `<div class="flex-grow text-center">设定中心</div>`;
            }
            const logoutButton = buttons.find(item => item.textContent.trim().includes("注销") || item.textContent.trim().includes("Log out"));
            if (logoutButton) {
                logoutButton.innerHTML = `<div class="flex-grow text-center">退出登录</div>`;
            }

            const newButtons = [
                createButton("切换节点", ""),
                createButton("语音交流", ""),
                createButton("联系客服", "https://t.me/chat111231")
            ];

            newButtons.forEach(button => settingsButton.insertAdjacentElement('beforebegin', button));
        }
    }
}, 100);

function initCustomFetch() {
    let prompt = '';
    const originalFetch = window.fetch;

    const prompts = {
        '连续对话': '',
        '超强翻译--备注语言': `你只需要回复收到`,
        '照片发贴--提供国家': ``,
        '代写三方--提供国家、性别、职业': ``,
        '今日行程--提供地址、天气': ``,
        '专业代聊--支持备注': ``,
        '七日计划--输入开始': ``
    };

    window.fetch = async (url, config) => {
        if (config && config.method === 'POST' && url.includes('/backend-api/conversation')) {
            if (config.body) {
                const body = JSON.parse(config.body);
                if (body.messages ?.[0] ?.content ?.parts ?.[0]) {
                    body.messages[0].content.parts[0] = `${prompt} ${body.messages[0].content.parts[0]}`;
                    config.body = JSON.stringify(body);
                }
            }
        }
        return originalFetch(url, config);
    };

    const originalElement = document.querySelector("div.flex.flex-col.pt-2");
    if (originalElement) {
        const selectList = document.createElement("select");
        selectList.id = "myCustomSelect";
        selectList.className = "group flex gap-2 p-2.5 text-sm cursor-pointer focus:ring-0 radix-disabled:pointer-events-none radix-disabled:opacity-50 items-center";
        selectList.style.border = 'none';
        selectList.style.borderRadius = '0';

        Object.entries(prompts).forEach(([mode]) => {
            const option = document.createElement("option");
            option.value = mode;
            option.text = mode;
            selectList.appendChild(option);
        });

        selectList.addEventListener('change', function () {
            prompt = prompts[this.value] || '';
        });

        originalElement.style.display = 'none';
        originalElement.parentElement.insertBefore(selectList, originalElement);
    }
}
